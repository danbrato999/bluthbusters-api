openapi: 3.0.0
info:
  description: API to handle the required data for the BluthBusters project
  version: 1.0.0-SNAPSHOT
  title: BluthBusters API
  contact:
    name: Daniel Bravo
    email: devian369@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: /
    description: Base server
tags:
  - name: movies
    description: List movie data available
  - name: movie-rentals
    description: Info related to renting of movies
security:
  - firebase: []
paths:
  /movies:
    get:
      tags:
        - movies
      summary: List all movies in the database
      operationId: listMovies
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
        - in: query
          name: status
          schema:
            type: string
            enum:
              - available
              - all
            default: available
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        200:
          description: Movies found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Movie'
    post:
      tags:
        - movies
      summary: Adds a new movie to the store
      operationId: addMovie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieForm'
      responses:
        201:
          description: Movie created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdObject'
  /movies/{id}:
    get:
      tags:
        - movies
      summary: Finds a movie by id
      operationId: findMovie
      parameters:
        - in: path
          name: id
          description: Movie id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Movie found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        404:
          description: Movie not found
    put:
      tags:
        - movies
      summary: Updates an existing movie
      operationId: updateMovie
      parameters:
        - in: path
          name: id
          description: Movie id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieForm'
      responses:
        200:
          description: Movie updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        400:
          description: Movie can't be updated with the specified parameters
        404:
          description: Movie not found
  /external/omdb/search:
    post:
      tags:
        - movies
      operationId: searchMovieExternalData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - byImdbId
                    - byName
                value:
                  type: string
      responses:
        200:
          description: External movie found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieMetaData'
        404:
          description: External movie not found
  /movie-rentals/{movieId}:
    post:
      tags:
        - movie-rentals
      summary: Rent a movie for a customer
      operationId: rentMovie
      parameters:
        - in: path
          name: movieId
          description: Movie id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rentUntil
              properties:
                rentUntil:
                  type: string
                  format: date
      responses:
        201:
          description: Rent created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicRentalDetail'
        400:
          description: This customer can't rent this movie
    delete:
      tags:
        - movie-rentals
      summary: Return a movie currently owned
      operationId: returnMovie
      parameters:
        - in: path
          name: movieId
          description: Movie id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Movie returned
        400:
          description: This customer can't return this movie
  /movie-rentals/{movieId}/rented:
    get:
      tags:
        - movie-rentals
      summary: Return data if the customer currently has a copy of the movie
      operationId: hasMovieCopy
      parameters:
        - in: path
          name: movieId
          description: Movie id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Customer has a copy of the movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicRentalDetail'
        204:
          description: Customer has no copie of the movie
  /customers/history:
    get:
      tags:
        - movie-rentals
      summary: Returns the renting history of a customer
      operationId: getCustomerHistory
      responses:
        200:
          description: History found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieRentalDetail'
components:
  securitySchemes:
    firebase:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ListResponse:
      type: object
      properties:
        totalCount:
          type: integer
    IdObject:
      type: object
      properties:
        id:
          type: string
    MovieMetaData:
      type: object
      required:
        - imdbId
        - title
        - genre
        - year
        - director
        - runtime
        - poster
        - description
      properties:
        imdbId:
          type: string
        title:
          type: string
        genre:
          type: string
        year:
          type: integer
        director:
          type: string
        runtime:
          type: string
        poster:
          type: string
        description:
          type: string
    MovieForm:
      type: object
      required:
        - externalData
        - trailer
        - copies
      properties:
        externalData:
          $ref: '#/components/schemas/MovieMetaData'
        trailer:
          type: string
        copies:
          type: integer
          minimum: 1
    Movie:
      type: object
      properties:
        id:
          type: string
        externalData:
          $ref: '#/components/schemas/MovieMetaData'
        trailer:
          type: string
        inventory:
          type: object
          properties:
            copies:
              type: integer
            available:
              type: integer
    BasicRentalDetail:
      type: object
      properties:
        id:
          type: string
        movieId:
          type: string
        rentedAt:
          type: string
          format: date-time
        rentUntil:
          type: string
          format: date
        returnedAt:
          type: string
          format: date-time
    MovieRentalDetail:
      allOf:
        - $ref: '#/components/schemas/BasicRentalDetail'
        - type: object
          properties:
            movie:
              $ref: '#/components/schemas/MovieMetaData'
